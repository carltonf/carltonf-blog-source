<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Crystal Sight]]></title>
  <link href="http://carltonf.github.io/atom.xml" rel="self"/>
  <link href="http://carltonf.github.io/"/>
  <updated>2014-11-27T00:39:27+08:00</updated>
  <id>http://carltonf.github.io/</id>
  <author>
    <name><![CDATA[Carl Xiong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Packaging and Several Concepts]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-26-packaging-and-several-concepts.html"/>
    <updated>2014-11-26T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/packaging-and-several-concepts</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Intro</h2>
<div class="outline-text-2" id="text-1">
<p>
The other day some of my colleagues were discussing about how to manage a
package. From what I heard: <code>SUSE</code> decides to use kernel&#8217;s bundled <code>DRDB</code> module
instead of the version built out of <code>DRDB</code>&#8217;s source tree, which is dropped in
<code>DRDB</code>&#8217;s new version anyway. The package for this new <code>DRDB</code> is called
<code>DRDB-user</code> as it only contains the user-space part. The problem rises when a
user of older version of <code>SLE</code> (SUSE Linux Enterprise) decides to update to this
<code>DRDB-user</code>. <code>DRDB-user</code> is said to support some old versions, i.e. for these
versions you can mix up kernel modules from old <code>DRDB</code> package with newer
<code>DRDB-user</code>. The question is how to do the packaging? (I am totally ignorant
about <code>DRDB</code>, so the details might not be exact but the important point here is
packaging.)
</p>

<p>
I joined this discussion and throughout the course I&#8217;ve come to understand many
concepts more clearly than before: no overlap among packages, different
packaging methods, the meaning and differences between &#8220;Obsoletes&#8221; and
&#8220;Conflicts&#8221;
</p>

<p>
<!-- more -->
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">How to design packages?</h2>
<div class="outline-text-2" id="text-2">
<p>
The most intuitive and also best way should be just to divide the old <code>DRDB</code>
package into two: <code>DRDB-user</code> and <code>DRDB-km</code>. In this way, <code>DRDB-user</code> is just
the new package and can be upgraded separately if needed. So far so good. But
what if we don&#8217;t want to change the old package? Why? In retrospect, I think
it&#8217;s truly evil to have thought in that way, but back then they wanted to limit
the <span class="underline">maintenance burden</span> by reducing the number of packages.(Oh, I did support
this view&#x2026;, I understand&#x2026;) And then we fell into the rabbit hole.
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Packages should never overwrite each other.</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The first idea was to have <code>DRDB-user</code> overwrite <code>DRDB</code>. This won&#8217;t work. No
matter how the dependency links are designed. Naive I was, I believed
carefully-crafted dependency would avoid any package breaks. Even cyclic
dependency was considered. As an afterthought, no overlap between packages is
actually the number one rule of packaging. In this case, just think of
re-installing <code>DRDB</code> after <code>DRDB-user</code> is installed.
</p>

<p>
However, this is the quickest solution. So if the use cases of mixing up old
<code>DRDB</code> with new <code>DRDB-user</code> are only few, then it might not be necessary to
design <code>DRDB-km</code>. To tell the sysadmin to be extra careful or add some warning
to the (un)installation/update message would be enough.
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Overwriting while packaging.</h3>
<div class="outline-text-3" id="text-2-2">
<p>
In the build&amp;install phrase of packaging, build old <code>DRDB</code> and also new
<code>DRDB-user</code>; install <code>DRDB</code> first, then <code>DRDB-user</code>, overwriting same files at
the same time. At last you pack everything up and name it <code>DRDB</code>. This method
should work in principle, but it&#8217;s bizarre and in reality we maintain a new
package even though it has an old name.
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">Several concepts</h3>
<div class="outline-text-3" id="text-2-3">
<p>
When talking about making new packages, we got confused on &#8220;Obsoletes&#8221; vs
&#8220;Conflicts&#8221;. I&#8217;ll put up two good references:
</p>

<p>
<a href="http://rpm5.org/community/rpm-users/0442.html">&#8220;Re: Conflicts vs Obsoletes&#8221; from rpm5.org</a>
</p>

<p>
<a href="https://wiki.archlinux.org/index.php/PKGBUILD#replaces">PKGBUILD#replaces</a> &#x2013; <code>replaces</code> is just the <code>Obsoletes</code> in <code>Arch</code>&#8217;s jargon.
</p>

<p>
In common, they all remove the designated packages. &#x2013; here is the cause we get
confused.
</p>

<p>
But have different purposes: <code>Obsoletes</code> prescribes an upgrade, so it&#8217;s
automatically done by the packaging system. <code>Conflicts</code> prevents installation
and these packages are surely not in the upgraded package list.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">After note</h2>
<div class="outline-text-2" id="text-3">
<p>
I didn&#8217;t follow this discussion later and don&#8217;t know what they&#8217;ve decided to do
in the end. In reflection, I realized how little I knew about packaging and how
real-life <span class="underline">politics</span> can affect engineering choice. The mentality to avoid
designing necessary new packages might come from this fact: whoever introduces
the package is likely to be responsible for maintaining it. And there are
already <b>A LOT</b> of packages at each one&#8217;s hand. Further, even the evil
package-overwriting method might be useful, if only one or two customers need
that special mix setup.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch for SUSE Package Development]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-21-arch-for-suse-package-development.html"/>
    <updated>2014-11-21T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/arch-for-suse-package-development</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Summary</h2>
<div class="outline-text-2" id="text-1">
<p>
I work across multiple computers: home PC, my own laptop, company PC and laptop.
And I like to use <code>Arch</code> for my daily work everywhere. The problem is that
<code>Linux</code> does a poor job to support new hardware, more so for less known brands.
For example the sleep/hibernation on my AMD-laptop constantly breaks. So I&#8217;ve
opted for a <code>VM/Linux + Windows/Linux</code> setup. My <code>Arch</code> runs inside the
<code>VirtualBox</code>, and basically all I need is to sync the <code>vm</code> to have a consistent
working environment EVERYWHERE! It took me about one month to adapt to this new
layout, but it feels superb!
</p>

<p>
A little off topic;P, just a little background.
</p>

<p>
This article introduces <a href="https://github.com/carltonf/arch-suse-dev-setup">my simple package</a> for making <code>Arch</code> a good environment
for SUSE package development.
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Code</h2>
<div class="outline-text-2" id="text-2">
<p>
It&#8217;s only a <code>PKGBUILD</code> file now. Here is the link: <a href="https://github.com/carltonf/arch-suse-dev-setup">arch-suse-dev-setup</a>. <b>Alpha
stage</b>.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Some Highlights</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><code>RPM</code> macros</h3>
<div class="outline-text-3" id="text-3-1">
<p>
<code>osc</code> works flawlessly on <code>Arch</code>. Errors/warnings are shown when you <code>rpmbuild
-bp</code> the source. Many <code>RPM</code> macros are missing, some are SUSE-specific, some are
upstream macros considered common on SUSE machines. And thus chasing down files
with these macro definitions is the first task.
</p>

<p>
The most useful command is this <code>rpm --showrc</code>. You can find path definitions,
custom macro file naming pattern and etc.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><code>suse_version</code></h3>
<div class="outline-text-3" id="text-3-2">
<p>
It&#8217;s defined in the OBS project configuration, so no problem in <code>osc build</code>.
</p>

<p>
However, <code>rpm</code> is not OBS-aware, so it would not read project configuration.
<code>rpm</code> will find this value in the local macro file, which records the version of
the running SUSE, which usually is not the same as the one in project
configuration.
</p>

<p>
In my package, I have default the version to <code>openSUSE:Factory</code> and warns the
user that they might need to overrides this macro.
</p>

<p>
Can we make this better? I am thinking of the <code>envsetup</code> in <code>Android</code>, which
before any coding happen setup the environment and introduce lots of useful
utilities. <code>osc</code> should setup the current environment as well, so that tools
like <code>rpm</code> would be configured right. Definitely on my TODO list.
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">Fake utilities</h3>
<div class="outline-text-3" id="text-3-3">
<p>
For code hacking/patching, <code>rpm</code> will only execute <code>%prep</code> part of the SPEC
file. Even so some tools missed from <code>Arch</code> are still used. Among them the
translation update scripts are mostly notable.
</p>

<p>
Since I am not interested in translation texts, I made fake utilities that does
nothing. This works fine translations.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Status</h2>
<div class="outline-text-2" id="text-4">
<p>
<code>rpm -bp</code> and <code>quilt setup</code> now works like a charm, not a single warnings or
errors, at least for the packages I&#8217;ve been working on.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Update</h2>
<div class="outline-text-2" id="text-5">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2014-11-25 Tue]</span></span> I&#8217;m picking up new packages along the way! Add
<code>obs-service-source_validator</code> and <code>obs-service-format_spec_file-git</code>. They are all uploaded to <code>AUR</code>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Customization: Easy Blog Source Link]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-20-octopress-customization:-easy-blog-source-link.html"/>
    <updated>2014-11-20T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/octopress-customization:-easy-blog-source-link</id>
    <content type="html"><![CDATA[<p>

</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Summary</h2>
<div class="outline-text-2" id="text-1">
<p>
Most my posts here are programming-related and one of <code>Org</code>&#8217;s killer features is
embedding code (used in literate programming and etc.), I thought why not give
the reader an easier way to access my post source. Chances are that they might
be using <code>Emacs</code> and <code>Org</code>, then they can try the code directly without
copying/pasting or the hassle to wade through my source repo ;).
</p>

<p>
It turns out to be quite easy to do this, as shown in the red rectangle below:
<img src="http://carltonf.github.io/blog/2014-11-20-octopress-customization:-easy-blog-source-link/2014-11-20-223301_856x329_scrot.png" alt="2014-11-20-223301_856x329_scrot.png" />
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Code and References</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Two key references:</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li><a href="http://jekyllrb.com/docs/variables/">Jekyll Variables</a>: simply put, just various blog/post/page information
available to you when you are hacking.
</li>
<li><a href="http://jekyllrb.com/docs/templates/">Jekyll Templates</a> and <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">Liquid Filters&amp;Tags</a>: again simply, various predefined
methods or programming structure you can use to manipulate the data you
extract from above. The <code>Liquid</code> document is more useful.
</li>
<li><a href="http://octopress.org/docs/theme/">Octopress: Theming &amp; Customization</a>: the <code>Octopress</code>-specific docs.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Code</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Here is the whole commit:
</p>
<div class="org-src-container">

<pre class="src src-diff"><span class="linenr"> 1: </span><span style="color: #93a1a1;">diff --git a/source/_includes/article.html b/source/_includes/article.html</span>
<span class="linenr"> 2: </span><span style="color: #93a1a1;">index 8427997..c38fd90 100644</span>
<span class="linenr"> 3: </span><span style="color: #586e75; background-color: #fdf6e3;">--- </span><span style="color: #586e75; background-color: #fdf6e3;">a/source/_includes/article.html</span>
<span class="linenr"> 4: </span><span style="color: #586e75; background-color: #fdf6e3;">+++ </span><span style="color: #586e75; background-color: #fdf6e3;">b/source/_includes/article.html</span>
<span class="linenr"> 5: </span><span style="color: #586e75; background-color: #fdf6e3;">@@ -12,6 +12,14 @@</span>
<span class="linenr"> 6: </span><span style="color: #93a1a1;">            | &lt;a href="{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread"</span>
<span class="linenr"> 7: </span><span style="color: #93a1a1;">              data-disqus-identifier="{% if post.meta.disqus_id %}{{ post.meta.disqus_id }}{% else %}{{ site.url }}{{ post.url }}{% endif %}"&gt;Comments&lt;/a&gt;</span>
<span class="linenr"> 8: </span><span style="color: #93a1a1;">         {% endif %}</span>
<span class="linenr"> 9: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        |</span>
<span id="coderef-is-home" class="coderef-off"><span class="linenr">10: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% if index %}</span></span>
<span class="linenr">11: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% capture abs_page_url %}{{ root_url }}{{ post.url }}{% endcapture %}</span>
<span class="linenr">12: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        &lt;a href="{{ abs_page_url | split:'.html' | first | append:'.org' }}"&gt;SOURCE&lt;/a&gt;</span>
<span class="linenr">13: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% else %}</span>
<span id="coderef-html-to-org" class="coderef-off"><span class="linenr">14: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        &lt;a href="{{ page.url | split:'.html' | first | append:'.org' }}"&gt;SOURCE&lt;/a&gt;</span></span>
<span class="linenr">15: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% endif %}</span>
<span class="linenr">16: </span><span style="color: #859900; font-weight: bold;">+</span>
<span class="linenr">17: </span><span style="color: #93a1a1;">       &lt;/p&gt;</span>
<span class="linenr">18: </span><span style="color: #93a1a1;">     {% endunless %}</span>
<span class="linenr">19: </span><span style="color: #93a1a1;">   &lt;/header&gt;</span>
</pre>
</div>

<p>
<b>Explanations:</b>
</p>
<ul class="org-ul">
<li>Line <a href="#coderef-is-home"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-is-home');" onmouseout="CodeHighlightOff(this, 'coderef-is-home');">10</a> checks whether the current html snippet is in Home page or not.
If the post is in Home, links in the articles are updated to absolute path
(versus the site), otherwise relative paths are used.
</li>
<li>Line <a href="#coderef-html-to-org"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-html-to-org');" onmouseout="CodeHighlightOff(this, 'coderef-html-to-org');">14</a> uses 3 filters to replace <code>.html</code> with <code>.org</code>. I have my
source synced to the <code>_deploy/blog</code> so here changing the extension is enough.
I didn&#8217;t find a better way to do this simple replacement :(.
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Afternote</h2>
<div class="outline-text-2" id="text-3">
<p>
While I still like this idea of sharing blog source more easily, its usability
might not always be so good as I thought. As in this post, I&#8217;ve used some <code>Org</code>
link reference to make explanation clearer, which is nice for a post but at the
same time make it inconvenient to use the code directly.
</p>

<p>

</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-octopress: Links]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-19-org-octopress:-links.html"/>
    <updated>2014-11-19T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/org-octopress:-links</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Summary</h2>
<div class="outline-text-2" id="text-1">
<p>
In <a href="http://www.railsonmaui.com/blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/index.html">Org-Mode Octopress Setup V2</a>, which I am still reading to complete my setup of
<code>Org</code> with <code>Octopress</code>, the author mentions the problems with links in <b>Org-mode
Integration</b>.
</p>

<p>
After digging around, here is my solution for that issue. Basically, the <code>Org</code>
already has facilities for URL handling, but these are deeply buried in the
code.
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">My desired behavior</h2>
<div class="outline-text-2" id="text-2">
<p>
As my <code>org</code> source files all reside in <code>source/blog/</code> directory, all local
references should be using path relative to this directory. E.g. for
<code>blog/a.org</code> to refer to <code>blog/b.org</code>, <code>./b.org</code> is all I need, for images
in <code>source/image</code>, the link should look like <code>../image/</code>.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Issues</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>Org</code> can automatically convert <code>org</code> file link to <code>html</code> link, the gotcha here
is: if the path is absolute, it would prefix it with <code>file:</code> in the final
output. The relevant code snippet in <code>ox-html.el:org-html-link</code>:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">If file path is absolute, prepend it with protocol</span>
<span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">component - "file:".</span>
(<span style="color: #859900;">cond</span>
 ((file-name-absolute-p raw-path)
  (setq raw-path (concat <span style="color: #2aa198;">"file:"</span> raw-path)))
 ((and home use-abs-url)
  (setq raw-path (concat (file-name-as-directory home) raw-path))))
</pre>
</div>

<p>
But the relative link doesn&#8217;t work reliably in the published site.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Solution</h2>
<div class="outline-text-2" id="text-4">
<p>
Use two <code>Org</code> export option:
</p>
<pre class="example">
#+HTML_LINK_HOME: /blog/
#+OPTIONS: html-link-use-abs-url:t
</pre>

<p>
The combined effect of these two is to prefix all links with <code>/blog/</code> in the
exported files, an absolute path on site. I&#8217;ve set these in the global
<code>setupfile.org</code>, but they can also be used per-file or per-subtree.
</p>

<p>
With these two options, locally you only need to write relative links and
conversion to site absolute path is automatically taken care of.
</p>

<p>
The related <code>ELisp</code> source code snippet is in
<code>ox-html.el:org-export-define-backend</code> part. Read the document on
<code>org-export-define-backend</code> to appreciate these deeply buried features ;P
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello and Self-Introduction]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-19-hello-and-self-introduction.html"/>
    <updated>2014-11-19T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/hello-and-self-introduction</id>
    <content type="html"><![CDATA[<p>
A &#8220;Hello World&#8221; blog. Later it would grow into Page &#8220;About&#8221;.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">About Me (Philosophy matters)</h2>
<div class="outline-text-2" id="text-1">
<p>
I&#8217;m an tech enthusiast with a business-like perspective towards the world.
</p>

<p>
To me, there are only two things that matter: one that&#8217;s interesting, the other
that&#8217;s profitable.
</p>

<p>
All the happiness and sadness arises from the fact: the only way to understand
an objective world is through the subjective mind.
</p>

<p>
In the last but not the least, I am a programmer ;P
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">About me</h2>
<div class="outline-text-2" id="text-2">
<p>
I have a <a href="https://cn.linkedin.com/pub/chao-xiong/16/164/480">Linkedin profile</a>, which says much about my education and career so far.
</p>

<p>
I am a Chinese and currently living in Beijing.
</p>

<p>
That&#8217;s basically all.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">About this blog</h2>
<div class="outline-text-2" id="text-3">
<p>
My interests are broad but this blog site would be a mostly programming-related
one. Basically everything about my work, my hobby project and etc.
</p>

<p>
I&#8217;d like short blog and regular posting.
</p>

<p>
This blog also serves a wiki for me ;P and in sharing them, I hope it would be
useful to others as well.
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
