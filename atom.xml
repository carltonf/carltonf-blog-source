<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Crystal Sight]]></title>
  <link href="http://carltonf.github.io/atom.xml" rel="self"/>
  <link href="http://carltonf.github.io/"/>
  <updated>2014-11-18T20:06:50+08:00</updated>
  <id>http://carltonf.github.io/</id>
  <author>
    <name><![CDATA[Carl Xiong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raw_markdown_try]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-18-raw-markdown-try/"/>
    <updated>2014-11-18T20:01:53+08:00</updated>
    <id>http://carltonf.github.io/blog/raw-markdown-try</id>
    <content type="html"><![CDATA[<p>Hello, I am nothing but a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something Fun to Try]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-18-something-fun-to-try/"/>
    <updated>2014-11-18T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/something-fun-to-try</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Life is shitty hole. I&#8217;ve tried everything out ;P</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="blog/2014-11-18-org-octopress/">Org Octopress: the first post</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org Octopress]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-18-org-octopress/"/>
    <updated>2014-11-18T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/org-octopress</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Stupid tried files</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="todo TODO">TODO</span> Ido on fullscreen</h3>
<div class="outline-text-3" id="text-1-1">

<p>
type <code>?</code> in <code>ido</code> mode and see completion buffer.
</p>

<p>
Though I think this interface is in no par with <code>Helm</code>.
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="todo TODO">TODO</span> <code>M-0 kill-line</code>: kill text before the point</h3>
<div class="outline-text-3" id="text-1-2">

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900;">lambda</span> (arg)
  (interactive <span style="color: #2aa198;">"p"</span>)
  (message <span style="color: #2aa198;">"I don't do a damn thing ;P"</span>))
</pre>
</div>


<p>
<!-- more -->
</p>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><a id="ID-bc917da7-2c72-4a78-a539-b0f5a1c00550" name="ID-bc917da7-2c72-4a78-a539-b0f5a1c00550"></a><span class="todo TODO">TODO</span> Use &#8216;C-h A&#8217; (`apropos&#8217;) more often</h3>
<div class="outline-text-3" id="text-1-3">
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><a id="ID-fd18b1f1-da43-4750-80bc-fbc2cd08f8de" name="ID-fd18b1f1-da43-4750-80bc-fbc2cd08f8de"></a><span class="todo TODO">TODO</span> Review <a href="bash#History%20Interaction"><a href="bash#History">bash#History</a> Interaction</a></h3>
<div class="outline-text-3" id="text-1-4">

<p>
various designators and modifiers are of particular interests.
</p>

<ul class="org-ul">
<li><code>[&#xa0;]</code> <code>!!</code>: previous command
</li>
<li><code>[&#xa0;]</code> <code>!$</code>: last argument

<p>
Not really used very often as M-. is good enough.
</p>
</li>

<li><code>[&#xa0;]</code> <code>!0</code>: the `0&#8217;th word
</li>

<li><code>[&#xa0;]</code> <code>!*</code>: All of the words, except the `0&#8217;th.

<p>
very useful.
</p>
</li>

<li><code>[&#xa0;]</code> The combinations of <code>history | grep xxxx</code> and <code>!&lt;number&gt;</code>

<p>
A much better way to revisit old commands than repeated <code>C-R</code>
</p>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="todo TODO">TODO</span> ELisp <code>sxhash</code> and <code>equal</code></h3>
<div class="outline-text-3" id="text-1-5">

<p>
<code>sxhash</code> computes the hash code according to the contents of the object.
</p>

<p>
So two objects that are <code>equal</code> will result in the same hash id.
</p>
</div>
</div>
<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6"><span class="todo TODO">TODO</span> Review Emacs cookbook note</h3>
<div class="outline-text-3" id="text-1-6">
<p>
<a href="file:///home/carl/Dropbox/T420sync/emacs_cookbook/elisp_cookbook.html">cookbook.org</a>
</p>
</div>
</div>
<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7"><span class="todo TODO">TODO</span> Emacs in batch mode output to stdout</h3>
<div class="outline-text-3" id="text-1-7">

<p>
<code>print</code>, see <code>standard-output</code>&#8217;s help
<code>message</code>, outputs to <code>stderr</code>
</p>
</div>
</div>
<div id="outline-container-sec-1-8" class="outline-3">
<h3 id="sec-1-8"><span class="todo TODO">TODO</span> <code>flush-lines</code></h3>
<div class="outline-text-3" id="text-1-8">

<p>
handy for multiple lines deletion
</p>

<p>
read <a href="http://www.masteringemacs.org/articles/2011/03/16/removing-blank-lines-buffer/">http://www.masteringemacs.org/articles/2011/03/16/removing-blank-lines-buffer/</a>
</p>
</div>
</div>
<div id="outline-container-sec-1-9" class="outline-3">
<h3 id="sec-1-9"><span class="done DONE">DONE</span> <code>highlight-phrases</code></h3>
<div class="outline-text-3" id="text-1-9">

<p>
use font lock or overlay to highlight some phrases in a buffer (extremely
helpful for code viewing.)
</p>

<p>
Reciprocally, <code>unhighlight-phrases</code> to revert highlighted terms.
</p>
</div>
</div>
<div id="outline-container-sec-1-10" class="outline-3">
<h3 id="sec-1-10"><span class="todo TODO">TODO</span> <code>ps</code> to display a process tree</h3>
<div class="outline-text-3" id="text-1-10">

<p>
<code>ps -afx</code>, remind me to seriously learn more about <code>ps</code>.
</p>
</div>
</div>

<div id="outline-container-sec-1-11" class="outline-3">
<h3 id="sec-1-11"><span class="todo TODO">TODO</span> Note the difference between PWD and CWD</h3>
<div class="outline-text-3" id="text-1-11">

<p>
PWD is just an environment variable, not necessarily reflect the CWD.
</p>

<p>
use <code>pwd</code> or <code>pwdx $PID</code> to checkout the CWD (which is <code>/proc/$PID/cwd</code>)
</p>
</div>
</div>
<div id="outline-container-sec-1-12" class="outline-3">
<h3 id="sec-1-12"><span class="todo TODO">TODO</span> Save all file-related buffers</h3>
<div class="outline-text-3" id="text-1-12">

<p>
<a href="http://stackoverflow.com/questions/1852812/saving-all-modified-buffers-in-emacs-but-not-one-by-one">http://stackoverflow.com/questions/1852812/saving-all-modified-buffers-in-emacs-but-not-one-by-one</a>
In emacs &gt;23, with ibuffer :
</p>

<p>
&#8216;M-x ibuffer&#8217; (to open a list of buffers)
&#8216;*u&#8217; (start and u at the same time) to marked all unsaved buffers
&#8216;S&#8217; to save all marked buffers
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
