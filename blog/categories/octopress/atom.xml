<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Crystal Sight]]></title>
  <link href="http://carltonf.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://carltonf.github.io/"/>
  <updated>2014-11-21T22:26:48+08:00</updated>
  <id>http://carltonf.github.io/</id>
  <author>
    <name><![CDATA[Carl Xiong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Customization: Easy Blog Source Link]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-20-octopress-customization:-easy-blog-source-link.html"/>
    <updated>2014-11-20T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/octopress-customization:-easy-blog-source-link</id>
    <content type="html"><![CDATA[<p>

</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Summary</h2>
<div class="outline-text-2" id="text-1">
<p>
Most my posts here are programming-related and one of <code>Org</code>&#8217;s killer features is
embedding code (used in literate programming and etc.), I thought why not give
the reader an easier way to access my post source. Chances are that they might
be using <code>Emacs</code> and <code>Org</code>, then they can try the code directly without
copying/pasting or the hassle to wade through my source repo ;).
</p>

<p>
It turns out to be quite easy to do this, as shown in the red rectangle below:
<img src="http://carltonf.github.io/blog/2014-11-20-octopress-customization:-easy-blog-source-link/2014-11-20-223301_856x329_scrot.png" alt="2014-11-20-223301_856x329_scrot.png" />
</p>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Code and References</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Two key references:</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li><a href="http://jekyllrb.com/docs/variables/">Jekyll Variables</a>: simply put, just various blog/post/page information
available to you when you are hacking.
</li>
<li><a href="http://jekyllrb.com/docs/templates/">Jekyll Templates</a> and <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">Liquid Filters&amp;Tags</a>: again simply, various predefined
methods or programming structure you can use to manipulate the data you
extract from above. The <code>Liquid</code> document is more useful.
</li>
<li><a href="http://octopress.org/docs/theme/">Octopress: Theming &amp; Customization</a>: the <code>Octopress</code>-specific docs.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Code</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Here is the whole commit:
</p>
<div class="org-src-container">

<pre class="src src-diff"><span class="linenr"> 1: </span><span style="color: #93a1a1;">diff --git a/source/_includes/article.html b/source/_includes/article.html</span>
<span class="linenr"> 2: </span><span style="color: #93a1a1;">index 8427997..c38fd90 100644</span>
<span class="linenr"> 3: </span><span style="color: #586e75; background-color: #fdf6e3;">--- </span><span style="color: #586e75; background-color: #fdf6e3;">a/source/_includes/article.html</span>
<span class="linenr"> 4: </span><span style="color: #586e75; background-color: #fdf6e3;">+++ </span><span style="color: #586e75; background-color: #fdf6e3;">b/source/_includes/article.html</span>
<span class="linenr"> 5: </span><span style="color: #586e75; background-color: #fdf6e3;">@@ -12,6 +12,14 @@</span>
<span class="linenr"> 6: </span><span style="color: #93a1a1;">            | &lt;a href="{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread"</span>
<span class="linenr"> 7: </span><span style="color: #93a1a1;">              data-disqus-identifier="{% if post.meta.disqus_id %}{{ post.meta.disqus_id }}{% else %}{{ site.url }}{{ post.url }}{% endif %}"&gt;Comments&lt;/a&gt;</span>
<span class="linenr"> 8: </span><span style="color: #93a1a1;">         {% endif %}</span>
<span class="linenr"> 9: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        |</span>
<span id="coderef-is-home" class="coderef-off"><span class="linenr">10: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% if index %}</span></span>
<span class="linenr">11: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% capture abs_page_url %}{{ root_url }}{{ post.url }}{% endcapture %}</span>
<span class="linenr">12: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        &lt;a href="{{ abs_page_url | split:'.html' | first | append:'.org' }}"&gt;SOURCE&lt;/a&gt;</span>
<span class="linenr">13: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% else %}</span>
<span id="coderef-html-to-org" class="coderef-off"><span class="linenr">14: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        &lt;a href="{{ page.url | split:'.html' | first | append:'.org' }}"&gt;SOURCE&lt;/a&gt;</span></span>
<span class="linenr">15: </span><span style="color: #859900; font-weight: bold;">+</span><span style="color: #859900; font-weight: bold;">        {% endif %}</span>
<span class="linenr">16: </span><span style="color: #859900; font-weight: bold;">+</span>
<span class="linenr">17: </span><span style="color: #93a1a1;">       &lt;/p&gt;</span>
<span class="linenr">18: </span><span style="color: #93a1a1;">     {% endunless %}</span>
<span class="linenr">19: </span><span style="color: #93a1a1;">   &lt;/header&gt;</span>
</pre>
</div>

<p>
<b>Explanations:</b>
</p>
<ul class="org-ul">
<li>Line <a href="#coderef-is-home"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-is-home');" onmouseout="CodeHighlightOff(this, 'coderef-is-home');">10</a> checks whether the current html snippet is in Home page or not.
If the post is in Home, links in the articles are updated to absolute path
(versus the site), otherwise relative paths are used.
</li>
<li>Line <a href="#coderef-html-to-org"class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-html-to-org');" onmouseout="CodeHighlightOff(this, 'coderef-html-to-org');">14</a> uses 3 filters to replace <code>.html</code> with <code>.org</code>. I have my
source synced to the <code>_deploy/blog</code> so here changing the extension is enough.
I didn&#8217;t find a better way to do this simple replacement :(.
</li>
</ul>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Afternote</h2>
<div class="outline-text-2" id="text-3">
<p>
While I still like this idea of sharing blog source more easily, its usability
might not always be so good as I thought. As in this post, I&#8217;ve used some <code>Org</code>
link reference to make explanation clearer, which is nice for a post but at the
same time make it inconvenient to use the code directly.
</p>

<p>

</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-octopress: Links]]></title>
    <link href="http://carltonf.github.io/blog/2014-11-19-org-octopress:-links.html"/>
    <updated>2014-11-19T00:00:00+08:00</updated>
    <id>http://carltonf.github.io/blog/org-octopress:-links</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Summary</h2>
<div class="outline-text-2" id="text-1">
<p>
In <a href="http://www.railsonmaui.com/blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/index.html">Org-Mode Octopress Setup V2</a>, which I am still reading to complete my setup of
<code>Org</code> with <code>Octopress</code>, the author mentions the problems with links in <b>Org-mode
Integration</b>.
</p>

<p>
After digging around, here is my solution for that issue. Basically, the <code>Org</code>
already has facilities for URL handling, but these are deeply buried in the
code.
</p>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">My desired behavior</h2>
<div class="outline-text-2" id="text-2">
<p>
As my <code>org</code> source files all reside in <code>source/blog/</code> directory, all local
references should be using path relative to this directory. E.g. for
<code>blog/a.org</code> to refer to <code>blog/b.org</code>, <code>./b.org</code> is all I need, for images
in <code>source/image</code>, the link should look like <code>../image/</code>.
</p>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Issues</h2>
<div class="outline-text-2" id="text-3">
<p>
<code>Org</code> can automatically convert <code>org</code> file link to <code>html</code> link, the gotcha here
is: if the path is absolute, it would prefix it with <code>file:</code> in the final
output. The relevant code snippet in <code>ox-html.el:org-html-link</code>:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">If file path is absolute, prepend it with protocol</span>
<span style="color: #93a1a1; font-style: italic;">;; </span><span style="color: #93a1a1; font-style: italic;">component - "file:".</span>
(<span style="color: #859900;">cond</span>
 ((file-name-absolute-p raw-path)
  (setq raw-path (concat <span style="color: #2aa198;">"file:"</span> raw-path)))
 ((and home use-abs-url)
  (setq raw-path (concat (file-name-as-directory home) raw-path))))
</pre>
</div>

<p>
But the relative link doesn&#8217;t work reliably in the published site.
</p>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Solution</h2>
<div class="outline-text-2" id="text-4">
<p>
Use two <code>Org</code> export option:
</p>
<pre class="example">
#+HTML_LINK_HOME: /blog/
#+OPTIONS: html-link-use-abs-url:t
</pre>

<p>
The combined effect of these two is to prefix all links with <code>/blog/</code> in the
exported files, an absolute path on site. I&#8217;ve set these in the global
<code>setupfile.org</code>, but they can also be used per-file or per-subtree.
</p>

<p>
With these two options, locally you only need to write relative links and
conversion to site absolute path is automatically taken care of.
</p>

<p>
The related <code>ELisp</code> source code snippet is in
<code>ox-html.el:org-export-define-backend</code> part. Read the document on
<code>org-export-define-backend</code> to appreciate these deeply buried features ;P
</p>
</div>
</div>

]]></content>
  </entry>
  
</feed>
